"""
Base Agent class for RecruitIQ system.
Provides common functionality for all AI agents including Gemini integration and audit logging.
"""

import os
import sys
from typing import Dict, Any, Optional, List
from datetime import datetime
import uuid
from google import genai
from google.genai import types
from app.config.database import db
from app.schemas.audit import AuditLogCreate

# Gemini API configuration
gemini_key: str = (os.environ.get('GEMINI_API_KEY') or
               sys.exit('GEMINI_API_KEY environment variable must be set'))

client = genai.Client(api_key=gemini_key)
DEFAULT_MODEL_STR = "gemini-2.5-flash"

class BaseAgent:
    """
    Base class for all AI agents in the RecruitIQ system.
    
    Provides common functionality including:
    - Gemini AI integration
    - Audit logging
    - Trace ID generation
    """
    
    def __init__(self, name: str):
        """Initialize the agent with a name and Gemini client."""
        self.name = name
        self.client = client
        self.model = DEFAULT_MODEL_STR
    
    async def log_activity(self, trace_id: str, prompt: Optional[str] = None, 
                          response: Optional[Any] = None, tools_used: Optional[List[str]] = None,
                          error: Optional[str] = None, metadata: Optional[Dict[str, Any]] = None,
                          job_id: Optional[str] = None, candidate_id: Optional[str] = None):
        """
        Log agent activity for audit and debugging purposes.
        
        Args:
            trace_id: Unique identifier for the operation
            prompt: Input prompt sent to the agent
            response: Response generated by the agent
            tools_used: List of tools utilized during processing
            error: Error message if operation failed
            metadata: Additional context data
            job_id: Associated job identifier
            candidate_id: Associated candidate identifier
        """
        try:
            if db.audit_logs is not None:
                log_data = AuditLogCreate(
                    trace_id=trace_id,
                    agent=self.name,
                    prompt=prompt,
                    response=response,
                    tools_used=tools_used or [],
                    error=error,
                    metadata=metadata,
                    job_id=job_id,
                    candidate_id=candidate_id
                )
                await db.audit_logs.create_log(log_data.dict())
            else:
                print(f"Audit log (DB unavailable) - {self.name}: {trace_id} - {error or 'Success'}")
        except Exception as e:
            print(f"Failed to log activity for {self.name}: {e}")
    
    def generate_trace_id(self) -> str:
        """Generate a unique trace ID for tracking operations."""
        return str(uuid.uuid4())
    
    async def call_gemini(self, prompt: str, max_tokens: int = 1000) -> str:
        """
        Make a call to the Gemini AI model.
        
        Args:
            prompt: The input prompt for the AI model
            max_tokens: Maximum tokens for the response
            
        Returns:
            Generated response text from Gemini
            
        Raises:
            Exception: If the API call fails
        """
        try:
            response = self.client.models.generate_content(
                model=self.model,
                contents=prompt
            )
            return response.text or "No response generated"
        except Exception as e:
            print(f"Error calling Gemini: {e}")
            raise e