version: '3.8'

services:
  # FastAPI Application - Production
  recruitiq-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: recruitiq-api-prod
    restart: always
    ports:
      - "5000:5000"
    environment:
      - MONGODB_URL=${MONGODB_URL}
      - DATABASE_NAME=${DATABASE_NAME:-agentic_recruitment}
      - API_HOST=${API_HOST:-0.0.0.0}
      - API_PORT=${API_PORT:-5000}
      - DEBUG=${DEBUG:-false}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    env_file:
      - .env
    networks:
      - recruitiq-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # MongoDB Express
  mongo-express:
    image: mongo-express:1.0.2
    container_name: recruitiq-mongo-express-prod
    restart: always
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_ROOT_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_ROOT_PASSWORD}
      - ME_CONFIG_MONGODB_URL=${MONGODB_URL}
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_EXPRESS_USERNAME}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_EXPRESS_PASSWORD}
    networks:
      - recruitiq-network
    profiles:
      - tools

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: recruitiq-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - recruitiq-api
    networks:
      - recruitiq-network
    profiles:
      - nginx


networks:
  recruitiq-network:
    driver: bridge
